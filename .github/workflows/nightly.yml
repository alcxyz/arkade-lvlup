name: Nightly Build

on:
  push:
    branches-ignore:
      - main
      - develop
  pull_request:
    branches-ignore:
      - main
      - develop


# ----------- CI SECTION -----------

jobs:
  build:
    if: "contains(github.event.head_commit.message, '[FORCE BUILD]') || contains(github.event.head_commit.message, '[FORCE RELEASE]')"
    runs-on: ubuntu-latest
    steps:
        - name: Checkout code
          uses: actions/checkout@v2
    
        - name: Setup Go
          uses: actions/setup-go@v2
          with:
            go-version: 1.21
    
        - name: Cache dependencies
          uses: actions/cache@v2
          with:
            path: ~/go/pkg/mod
            key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
            restore-keys: |
              ${{ runner.os }}-go-
    
        - name: Download dependencies
          run: go mod download
    
        - name: Test
          run: go test ./...
    
        - name: Build binary
          run: go build -o arkade-lvlup-${{ steps.ref_name.outputs.branch_or_tag }}-${{ matrix.os }}-${{ matrix.goarch }}${{ runner.os == 'Windows' && '.exe' || '' }} .
        
        - name: Archive production artifacts
          uses: actions/upload-artifact@v2
          with:
            name: arkade-lvlup-${{ matrix.os }}-${{ matrix.goarch }}
            path: ./arkade-lvlup-${{ steps.ref_name.outputs.branch_or_tag }}-${{ matrix.os }}-${{ matrix.goarch }}${{ runner.os == 'Windows' && '.exe' || '' }}
        
        - name: Rename Apple Silicon binary
          if: runner.os == 'macOS' && matrix.goarch == 'arm64'
          run: mv arkade-lvlup-macos-latest-arm64 arkade-lvlup-macos-latest-applesilicon
    
        - name: Set commit message
          id: commit
          run: echo "::set-output name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"   


# ----------- CD SECTION -----------

  release:
    if: "contains(github.event.head_commit.message, '[FORCE RELEASE]')"
    needs: build
    runs-on: ubuntu-latest
    steps:
        - name: Extract branch or tag name
          id: ref_name
          run: echo "::set-output name=branch_or_tag::$(echo ${GITHUB_REF#refs/*/})"
        
        - name: Download all built artifacts
          uses: actions/download-artifact@v2
          with:
            path: ./artifacts
        
        - name: Rename Apple Silicon binary
          run: |
            if [ -f "./artifacts/arkade-lvlup-macos-latest-arm64" ]; then
                mv ./artifacts/arkade-lvlup-macos-latest-arm64 ./artifacts/arkade-lvlup-macos-latest-applesilicon
            fi
        
        - name: Create Release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.MY_PAT }}
          with:
              tag_name: ${{ steps.ref_name.outputs.branch_or_tag }}-${{ github.run_id }}
              release_name: Release ${{ steps.ref_name.outputs.branch_or_tag }}-${{ github.run_id }}
              body: New release for ${{ steps.ref_name.outputs.branch_or_tag }}
              draft: false
              prerelease: true
        
        - name: Upload Release Assets
          run: |
            for file in ./artifacts/*; do
              if [[ -f "$file" ]]; then
                echo "Uploading $file..."
                curl \
                  -H "Authorization: token ${{ secrets.MY_PAT }}" \
                  -H "Content-Type: $(file -b --mime-type $file)" \
                  --data-binary @"$file" \
                  "${{ steps.create_release.outputs.upload_url }}?name=$(basename $file)"
              fi
            done

        - name: Move "latest" tag
          run: |
            # Delete the "latest" tag if it exists
            curl -X DELETE \
            -H "Authorization: token ${{ secrets.MY_PAT }}" \
            https://api.github.com/repos/${{ github.repository }}/git/refs/tags/latest

            # Create a new "latest" tag pointing to the current commit
            curl -X POST \
            -H "Authorization: token ${{ secrets.MY_PAT }}" \
            -H "Content-Type: application/json" \
            -d '{"ref":"refs/tags/latest", "sha":"${{ github.sha }}"}' \
            https://api.github.com/repos/${{ github.repository }}/git/refs