name: Automated Go Build & Release Workflow

on:
  push:
    branches:
      - main
      - develop
    tags:
      - '*.*.*'
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build & Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        goarch: [amd64, arm64]
        include:
          - os: ubuntu-latest
            goarch: amd64
            label: linux-amd64
            ext: ''
          - os: ubuntu-latest
            goarch: arm64
            label: linux-arm64
            ext: ''
          - os: macos-latest
            goarch: amd64
            label: macOS-amd64
            ext: ''
          - os: macos-latest
            goarch: arm64
            label: macOS-AppleSilicon
            ext: ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Test
        run: go test ./...

      - name: Build binary
        env:
          GOOS: ${{ matrix.os == 'macos-latest' && 'darwin' || 'linux' }}
          GOARCH: ${{ matrix.goarch }}
        run: go build -o arkade-lvlup-${{ matrix.label }}${{ matrix.ext }} .

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: arkade-lvlup-${{ matrix.label }}
          path: ./arkade-lvlup-${{ matrix.label }}${{ matrix.ext }}

  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Here, you might need multiple Download built artifact steps, one for each combination, or adjust as needed for your release structure
      - name: Download built artifact
        uses: actions/download-artifact@v2
        with:
          name: arkade-lvlup-linux-amd64

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            tag_name: ${{ github.ref_name }}
            release_name: Release ${{ github.ref_name }}
            body: New release for ${{ github.ref_name }}
            draft: false
            prerelease: false

      # Similar to the download step, you'd repeat the Upload Release Asset step for each build artifact
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./arkade-lvlup-linux-amd64
          asset_name: arkade-lvlup-linux-amd64
          asset_content_type: application/octet-stream
