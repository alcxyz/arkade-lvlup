name: Alpha Build

env:
  RELEASE_TYPE: alpha
  GITHUB_TOKEN: ${{ secrets.MY_PAT }}

on:
  push:
    branches-ignore:
      - main
      - develop
  pull_request:
    branches-ignore:
      - main
      - develop

# ----------- MATRIX DETERMINATION SECTION -----------      

jobs:
  determine-build-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ env.MATRIX_JSON }}    
    steps:
      - id: set-matrix
        run: |
          MATRIX="{\"os\":[\"ubuntu-latest\"],\"goarch\":[\"amd64\",\"arm64\"]}" # default to Linux
          if [[ "${{ github.event.head_commit.message }}" == *"[MAC]"* ]]; then
            MATRIX="{\"os\":[\"macos-latest\"],\"goarch\":[\"amd64\",\"arm64\"]}"
          elif [[ "${{ github.event.head_commit.message }}" == *"[WIN]"* ]]; then
            MATRIX="{\"os\":[\"windows-latest\"],\"goarch\":[\"amd64\",\"arm64\"]}" 
          elif [[ "${{ github.event.head_commit.message }}" == *"[ALL]"* ]]; then
            MATRIX="{\"os\":[\"ubuntu-latest\",\"macos-latest\",\"windows-latest\"],\"goarch\":[\"amd64\",\"arm64\"]}" # Builds for all platforms
          fi
          echo "MATRIX_JSON=$MATRIX" >> $GITHUB_ENV

# ----------- CI SECTION -----------
          
  build:
    needs: determine-build-matrix
    if: "contains(github.event.head_commit.message, '[FORCE BUILD]') || contains(github.event.head_commit.message, '[FORCE RELEASE]')"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{fromJson(needs.determine-build-matrix.outputs.matrix)}}
    outputs:
      branch_name: ${{ env.BRANCH_NAME }}
      tag_name: ${{ env.TAG_NAME }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Extract branch, tag, and repo names
        id: extract-names
        shell: bash
        run: |
          # Extract the type (branch or tag) and its name from the GITHUB_REF variable
          REF_TYPE=$(echo ${GITHUB_REF#refs/} | cut -d'/' -f1)
          REF_NAME=$(echo ${GITHUB_REF#refs/*/})
      
          if [[ "$REF_TYPE" == "heads" ]]; then
            echo "BRANCH_NAME=$REF_NAME" >> $GITHUB_ENV
          elif [[ "$REF_TYPE" == "tags" ]]; then
            echo "TAG_NAME=$REF_NAME" >> $GITHUB_ENV
          fi
      
          # Extract the repository name from the GITHUB_REPOSITORY variable
          REPOSITORY_NAME=${GITHUB_REPOSITORY##*/}
          echo "REPOSITORY_NAME=$REPOSITORY_NAME" >> $GITHUB_ENV
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

#      Cache was causing errors, turned off until further evaluation
#      - name: Cache dependencies
#        uses: actions/cache@v3
#        with:
#          path: ~/go/pkg/mod
#          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
#          restore-keys: |
#            ${{ runner.os }}-go-
#        env:
#          GO111MODULE: on
        
      - name: Download dependencies
        run: go mod download
    
      - name: Test
        run: go test ./...
    
      - name: Build binary
        run: |
          go build -o ${{ env.REPOSITORY_NAME }}-${{ matrix.os }}-${{ matrix.goarch }}${{ runner.os == 'Windows' && '.exe' || '' }}-${{ env.RELEASE_TYPE }} .

      - name: Archive artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.REPOSITORY_NAME }}-${{ matrix.os }}-${{ matrix.goarch }}-${{ env.RELEASE_TYPE }}
          path: ./${{ env.REPOSITORY_NAME }}-${{ matrix.os }}-${{ matrix.goarch }}${{ runner.os == 'Windows' && '.exe' || '' }}-${{ env.RELEASE_TYPE }}
            

# ----------- CD SECTION -----------         

  prune-releases:
    if: "contains(github.event.head_commit.message, '[FORCE RELEASE]')"
    runs-on: ubuntu-latest

    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.MY_PAT }}
          
      - name: Delete old release
        run: |
          # Check if a release exists and delete it
          if gh release view ${{ env.RELEASE_TYPE }} > /dev/null 2>&1; then
            gh release delete ${{ env.RELEASE_TYPE }} -y
            echo "Successfully deleted the ${{ env.RELEASE_TYPE }} release."
          else
            echo "No ${{ env.RELEASE_TYPE }} release found."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.MY_PAT }}
  
      - name: Delete old alpha tag locally and remotely
        run: |
          # Check if local tag exists and delete
          if git tag | grep -q '^alpha$'; then
            git tag -d alpha 
            echo "Successfully deleted the alpha tag locally."
          else
            echo "No local alpha tag found."
          fi
          
          # Debug: Print remote tags
          echo "Listing remote tags:"
          git ls-remote --tags origin
      
          # Check if remote tag exists and delete
          if git ls-remote --tags origin | grep -q 'refs/tags/alpha'; then
            git push origin :refs/tags/alpha 
            echo "Successfully deleted the alpha tag remotely."
          else
            echo "No remote alpha tag found."
          fi

      - name: Create new tag
        run: |
          git tag ${{ env.RELEASE_TYPE }}
          git push origin ${{ env.RELEASE_TYPE }}
          echo "Successfully created the new ${{ env.RELEASE_TYPE }} tag."
        env:
          GITHUB_TOKEN: ${{ secrets.MY_PAT }}
  

  release:
    if: "contains(github.event.head_commit.message, '[FORCE RELEASE]')"
    needs: [build, prune-releases]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.MY_PAT }}
      - name: Download all built artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: List Artifacts Directory
        run: |
          ls -R ./artifacts/

      - name: Create Release
        run: |
          gh release create alpha \
            --title "Alpha Release feature/improve-cicd" \
            --notes "Alpha release for feature/improve-cicd" \
            --draft
      
      - name: Upload Files to Release
        run: |
          TAG="alpha"
          FILES=$(ls ./artifacts/*/*)
          for FILE in $FILES; do
            gh release upload \
              $TAG \
              $FILE
          done
        