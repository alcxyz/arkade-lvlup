name: Beta Release

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

# ----------- CI SECTION -----------

jobs:
  build:
    name: Build & Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        goarch: [amd64, arm64]
    runs-on: ${{ matrix.os }}
    env:
      GOARCH: ${{ matrix.goarch }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.21

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Test
      run: go test ./...

    - name: Extract branch or tag name
      id: ref_name
      run: echo "::set-output name=branch_or_tag::$(echo ${GITHUB_REF#refs/*/})"

    - name: Get current timestamp
      id: get-timestamp
      run: echo "::set-output name=timestamp::$(date +'%Y%m%d-%H%M%S')"

    - name: Build binary
      run: go build -o arkade-lvlup-${{ steps.ref_name.outputs.branch_or_tag }}-${{ matrix.os }}-${{ matrix.goarch }}${{ runner.os == 'Windows' && '.exe' || '' }} .

    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: arkade-lvlup-${{ matrix.os }}-${{ matrix.goarch }}
        path: ./arkade-lvlup-${{ steps.ref_name.outputs.branch_or_tag }}-${{ matrix.os }}-${{ matrix.goarch }}${{ runner.os == 'Windows' && '.exe' || '' }}

    - name: Set commit message
      id: commit
      run: echo "::set-output name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"

# ----------- CD SECTION -----------

  release:
    name: Create Release and Upload Assets
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.MY_PAT }}
  
    - name: Prune old beta release if it exists
      run: |
        if gh release view beta > /dev/null 2>&1; then
          gh release delete beta -y
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.MY_PAT }}
      
    - name: Download all built artifacts
      uses: actions/download-artifact@v2
      with:
        path: ./artifacts
  
    - name: Create and Upload New Beta Release
      run: |
        gh release create \
            beta \
            ./artifacts/*/* \
            --title "Beta Release ${{ steps.ref_name.outputs.branch_or_tag }}" \
            --notes "Beta release for ${{ steps.ref_name.outputs.branch_or_tag }}" \
            --prerelease
      env:
        GITHUB_TOKEN: ${{ secrets.MY_PAT }}
